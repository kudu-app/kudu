// Code generated by protoc-gen-go.
// source: user/user.proto
// DO NOT EDIT!

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user.proto

It has these top-level messages:
	User
	RegisterRequest
	RegisterResponse
	LoginRequest
	LoginResponse
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import kudu_type "github.com/rnd/kudu/golang/protogen/type/creds"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// User hold user information.
type User struct {
	// id is user unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// username is user unique username.
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// first_name is user first name.
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	// last_name is user last name.
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	// created is user registration timestamp
	Created *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

// RegisterRequest holds user registration information.
type RegisterRequest struct {
	// credential is user credential.
	Credential *kudu_type.Credential `protobuf:"bytes,1,opt,name=credential" json:"credential,omitempty"`
	// user is user profile information.
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRequest) GetCredential() *kudu_type.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *RegisterRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// RegisterResponse holds the response of user registration.
type RegisterResponse struct {
	// status is the registration response status.
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// token is valid jwt token.
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RegisterResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// LoginRequest holds login reqeuest information.
type LoginRequest struct {
	// credential is user claimed credential.
	Credential *kudu_type.Credential `protobuf:"bytes,1,opt,name=credential" json:"credential,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginRequest) GetCredential() *kudu_type.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

// LoginResponse holds login reqeuest information.
type LoginResponse struct {
	// status is the registration response status.
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "kudu.item.User")
	proto.RegisterType((*RegisterRequest)(nil), "kudu.item.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "kudu.item.RegisterResponse")
	proto.RegisterType((*LoginRequest)(nil), "kudu.item.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "kudu.item.LoginResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/kudu.item.UserService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/kudu.item.UserService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kudu.item.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kudu.item.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kudu.item.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x49, 0x69, 0x4b, 0x33, 0x01, 0x5a, 0x59, 0xfc, 0x89, 0x52, 0x21, 0xaa, 0x70, 0xa0,
	0xe2, 0xe0, 0x48, 0x01, 0x6e, 0x1c, 0x10, 0xa8, 0x37, 0xc4, 0x21, 0xc0, 0x85, 0x0b, 0x4a, 0x93,
	0xa9, 0xb1, 0x9a, 0xd8, 0xc1, 0x76, 0x90, 0xf6, 0x35, 0xf6, 0x19, 0xf6, 0x41, 0x57, 0x76, 0x92,
	0x6e, 0xb4, 0xbb, 0xda, 0xcb, 0x5e, 0x22, 0xcd, 0xfc, 0xc6, 0x99, 0xef, 0xfb, 0x34, 0xb0, 0x6c,
	0x35, 0xaa, 0xc4, 0x7e, 0x68, 0xa3, 0xa4, 0x91, 0xc4, 0x3f, 0xb6, 0x65, 0x4b, 0xb9, 0xc1, 0x3a,
	0x7a, 0xcd, 0xa4, 0x64, 0x15, 0x26, 0x0e, 0xec, 0xdb, 0x43, 0x62, 0x78, 0x8d, 0xda, 0xe4, 0x75,
	0xd3, 0xcd, 0x46, 0x2b, 0x73, 0xd6, 0x60, 0x52, 0x28, 0x2c, 0x75, 0xd7, 0x89, 0x2f, 0x3c, 0x98,
	0xfe, 0xd2, 0xa8, 0xc8, 0x53, 0x98, 0xf0, 0x32, 0xf4, 0x36, 0xde, 0xd6, 0xcf, 0x26, 0xbc, 0x24,
	0x11, 0x2c, 0xec, 0x12, 0x91, 0xd7, 0x18, 0x4e, 0x5c, 0xf7, 0x54, 0x93, 0x57, 0x00, 0x07, 0xae,
	0xb4, 0xf9, 0xe3, 0xe8, 0x43, 0x47, 0x7d, 0xd7, 0xf9, 0x6e, 0xf1, 0x1a, 0xfc, 0x2a, 0x1f, 0xe8,
	0xb4, 0x7b, 0x6b, 0x1b, 0x0e, 0x7e, 0x80, 0x47, 0x85, 0xc2, 0xdc, 0x60, 0x19, 0xce, 0x36, 0xde,
	0x36, 0x48, 0x23, 0xda, 0xa9, 0xa6, 0x83, 0x6a, 0xfa, 0x73, 0x50, 0x9d, 0x0d, 0xa3, 0x71, 0x0d,
	0xcb, 0x0c, 0x19, 0xd7, 0x06, 0x55, 0x86, 0xff, 0x5a, 0xd4, 0x86, 0x7c, 0x04, 0xb0, 0x46, 0x50,
	0x18, 0x9e, 0x57, 0x4e, 0x78, 0x90, 0x3e, 0xa7, 0x2e, 0x0c, 0xeb, 0x92, 0x7e, 0x3d, 0xc1, 0x6c,
	0x34, 0x48, 0xde, 0xc0, 0xd4, 0xfa, 0x70, 0x9e, 0x82, 0x74, 0x49, 0x4f, 0xe9, 0x51, 0x1b, 0x43,
	0xe6, 0x60, 0xfc, 0x19, 0x56, 0x57, 0xeb, 0x74, 0x23, 0x85, 0x46, 0xf2, 0x02, 0xe6, 0xda, 0xe4,
	0xa6, 0xd5, 0x7d, 0x48, 0x7d, 0x45, 0x9e, 0xc1, 0xcc, 0xc8, 0x23, 0x8a, 0x3e, 0xa5, 0xae, 0x88,
	0x77, 0xf0, 0xf8, 0x9b, 0x64, 0x5c, 0xdc, 0x4f, 0x6d, 0xfc, 0x16, 0x9e, 0xf4, 0xbf, 0xb9, 0x5b,
	0x45, 0x7a, 0xee, 0x41, 0x60, 0x0d, 0xfc, 0x40, 0xf5, 0x9f, 0x17, 0x48, 0x76, 0xb0, 0x18, 0x1c,
	0x90, 0x68, 0x64, 0xf2, 0x5a, 0x8a, 0xd1, 0xfa, 0x56, 0xd6, 0x2d, 0x8b, 0x1f, 0x90, 0x4f, 0x30,
	0x73, 0xfb, 0xc9, 0xcb, 0xd1, 0xdc, 0xd8, 0x58, 0x14, 0xde, 0x04, 0xc3, 0xeb, 0x2f, 0xef, 0x7e,
	0x6f, 0x19, 0x37, 0x7f, 0xdb, 0x3d, 0x2d, 0x64, 0x9d, 0x28, 0x51, 0x26, 0x76, 0x36, 0x61, 0xb2,
	0xca, 0x05, 0xeb, 0xae, 0x94, 0xa1, 0x70, 0xc7, 0xbc, 0x9f, 0xbb, 0xf2, 0xfd, 0x65, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x9a, 0x15, 0xcb, 0x9f, 0xe0, 0x02, 0x00, 0x00,
}
